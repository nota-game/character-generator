var K=Object.defineProperty;var G=(s,e,t)=>e in s?K(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var _=(s,e,t)=>(G(s,typeof e!="symbol"?e+"":e,t),t);import{D as R,C as Q}from"./hitman.svelte_svelte_type_style_lang.c3cc91c5.js";import{C as B,S as F}from"./CharacterState.32b57e2f.js";import{w as x,d as A}from"./index.ffcb7820.js";import{O as Y}from"./index.a8d5bdb7.js";class v extends Error{constructor(e,t){const o=new.target.prototype;super(`${e}: Status code '${t}'`),this.statusCode=t,this.__proto__=o}}class N extends Error{constructor(e="A timeout occurred."){const t=new.target.prototype;super(e),this.__proto__=t}}class y extends Error{constructor(e="An abort occurred."){const t=new.target.prototype;super(e),this.__proto__=t}}class Z extends Error{constructor(e,t){const o=new.target.prototype;super(e),this.transport=t,this.errorType="UnsupportedTransportError",this.__proto__=o}}class q extends Error{constructor(e,t){const o=new.target.prototype;super(e),this.transport=t,this.errorType="DisabledTransportError",this.__proto__=o}}class ee extends Error{constructor(e,t){const o=new.target.prototype;super(e),this.transport=t,this.errorType="FailedToStartTransportError",this.__proto__=o}}class te extends Error{constructor(e){const t=new.target.prototype;super(e),this.errorType="FailedToNegotiateWithServerError",this.__proto__=t}}class ne extends Error{constructor(e,t){const o=new.target.prototype;super(e),this.innerErrors=t,this.__proto__=o}}class J{constructor(e,t,o){this.statusCode=e,this.statusText=t,this.content=o}}class D{get(e,t){return this.send({...t,method:"GET",url:e})}post(e,t){return this.send({...t,method:"POST",url:e})}delete(e,t){return this.send({...t,method:"DELETE",url:e})}getCookieString(e){return""}}var i;(function(s){s[s.Trace=0]="Trace",s[s.Debug=1]="Debug",s[s.Information=2]="Information",s[s.Warning=3]="Warning",s[s.Error=4]="Error",s[s.Critical=5]="Critical",s[s.None=6]="None"})(i||(i={}));class E{constructor(){}log(e,t){}}E.instance=new E;const oe="7.0.4";class w{static isRequired(e,t){if(e==null)throw new Error(`The '${t}' argument is required.`)}static isNotEmpty(e,t){if(!e||e.match(/^\s*$/))throw new Error(`The '${t}' argument should not be empty.`)}static isIn(e,t,o){if(!(e in t))throw new Error(`Unknown ${o} value: ${e}.`)}}class f{static get isBrowser(){return typeof window=="object"&&typeof window.document=="object"}static get isWebWorker(){return typeof self=="object"&&"importScripts"in self}static get isReactNative(){return typeof window=="object"&&typeof window.document>"u"}static get isNode(){return!this.isBrowser&&!this.isWebWorker&&!this.isReactNative}}function I(s,e){let t="";return T(s)?(t=`Binary data of length ${s.byteLength}`,e&&(t+=`. Content: '${se(s)}'`)):typeof s=="string"&&(t=`String data of length ${s.length}`,e&&(t+=`. Content: '${s}'`)),t}function se(s){const e=new Uint8Array(s);let t="";return e.forEach(o=>{const n=o<16?"0":"";t+=`0x${n}${o.toString(16)} `}),t.substr(0,t.length-1)}function T(s){return s&&typeof ArrayBuffer<"u"&&(s instanceof ArrayBuffer||s.constructor&&s.constructor.name==="ArrayBuffer")}async function X(s,e,t,o,n,r){const c={},[l,a]=k();c[l]=a,s.log(i.Trace,`(${e} transport) sending data. ${I(n,r.logMessageContent)}.`);const h=T(n)?"arraybuffer":"text",d=await t.post(o,{content:n,headers:{...c,...r.headers},responseType:h,timeout:r.timeout,withCredentials:r.withCredentials});s.log(i.Trace,`(${e} transport) request complete. Response status: ${d.statusCode}.`)}function re(s){return s===void 0?new $(i.Information):s===null?E.instance:s.log!==void 0?s:new $(s)}class ie{constructor(e,t){this._subject=e,this._observer=t}dispose(){const e=this._subject.observers.indexOf(this._observer);e>-1&&this._subject.observers.splice(e,1),this._subject.observers.length===0&&this._subject.cancelCallback&&this._subject.cancelCallback().catch(t=>{})}}class ${constructor(e){this._minLevel=e,this.out=console}log(e,t){if(e>=this._minLevel){const o=`[${new Date().toISOString()}] ${i[e]}: ${t}`;switch(e){case i.Critical:case i.Error:this.out.error(o);break;case i.Warning:this.out.warn(o);break;case i.Information:this.out.info(o);break;default:this.out.log(o);break}}}}function k(){let s="X-SignalR-User-Agent";return f.isNode&&(s="User-Agent"),[s,ce(oe,ae(),he(),le())]}function ce(s,e,t,o){let n="Microsoft SignalR/";const r=s.split(".");return n+=`${r[0]}.${r[1]}`,n+=` (${s}; `,e&&e!==""?n+=`${e}; `:n+="Unknown OS; ",n+=`${t}`,o?n+=`; ${o}`:n+="; Unknown Runtime Version",n+=")",n}function ae(){if(f.isNode)switch(process.platform){case"win32":return"Windows NT";case"darwin":return"macOS";case"linux":return"Linux";default:return process.platform}else return""}function le(){if(f.isNode)return process.versions.node}function he(){return f.isNode?"NodeJS":"Browser"}function O(s){return s.stack?s.stack:s.message?s.message:`${s}`}function de(){if(typeof globalThis<"u")return globalThis;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw new Error("could not find global")}class ge extends D{constructor(e){if(super(),this._logger=e,typeof fetch>"u"){const t=typeof __webpack_require__=="function"?__non_webpack_require__:require;this._jar=new(t("tough-cookie")).CookieJar,this._fetchType=t("node-fetch"),this._fetchType=t("fetch-cookie")(this._fetchType,this._jar)}else this._fetchType=fetch.bind(de());if(typeof AbortController>"u"){const t=typeof __webpack_require__=="function"?__non_webpack_require__:require;this._abortControllerType=t("abort-controller")}else this._abortControllerType=AbortController}async send(e){if(e.abortSignal&&e.abortSignal.aborted)throw new y;if(!e.method)throw new Error("No method defined.");if(!e.url)throw new Error("No url defined.");const t=new this._abortControllerType;let o;e.abortSignal&&(e.abortSignal.onabort=()=>{t.abort(),o=new y});let n=null;if(e.timeout){const a=e.timeout;n=setTimeout(()=>{t.abort(),this._logger.log(i.Warning,"Timeout from HTTP request."),o=new N},a)}e.content===""&&(e.content=void 0),e.content&&(e.headers=e.headers||{},T(e.content)?e.headers["Content-Type"]="application/octet-stream":e.headers["Content-Type"]="text/plain;charset=UTF-8");let r;try{r=await this._fetchType(e.url,{body:e.content,cache:"no-cache",credentials:e.withCredentials===!0?"include":"same-origin",headers:{"X-Requested-With":"XMLHttpRequest",...e.headers},method:e.method,mode:"cors",redirect:"follow",signal:t.signal})}catch(a){throw o||(this._logger.log(i.Warning,`Error from HTTP request. ${a}.`),a)}finally{n&&clearTimeout(n),e.abortSignal&&(e.abortSignal.onabort=null)}if(!r.ok){const a=await M(r,"text");throw new v(a||r.statusText,r.status)}const l=await M(r,e.responseType);return new J(r.status,r.statusText,l)}getCookieString(e){let t="";return f.isNode&&this._jar&&this._jar.getCookies(e,(o,n)=>t=n.join("; ")),t}}function M(s,e){let t;switch(e){case"arraybuffer":t=s.arrayBuffer();break;case"text":t=s.text();break;case"blob":case"document":case"json":throw new Error(`${e} is not supported.`);default:t=s.text();break}return t}class ue extends D{constructor(e){super(),this._logger=e}send(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new y):e.method?e.url?new Promise((t,o)=>{const n=new XMLHttpRequest;n.open(e.method,e.url,!0),n.withCredentials=e.withCredentials===void 0?!0:e.withCredentials,n.setRequestHeader("X-Requested-With","XMLHttpRequest"),e.content===""&&(e.content=void 0),e.content&&(T(e.content)?n.setRequestHeader("Content-Type","application/octet-stream"):n.setRequestHeader("Content-Type","text/plain;charset=UTF-8"));const r=e.headers;r&&Object.keys(r).forEach(c=>{n.setRequestHeader(c,r[c])}),e.responseType&&(n.responseType=e.responseType),e.abortSignal&&(e.abortSignal.onabort=()=>{n.abort(),o(new y)}),e.timeout&&(n.timeout=e.timeout),n.onload=()=>{e.abortSignal&&(e.abortSignal.onabort=null),n.status>=200&&n.status<300?t(new J(n.status,n.statusText,n.response||n.responseText)):o(new v(n.response||n.responseText||n.statusText,n.status))},n.onerror=()=>{this._logger.log(i.Warning,`Error from HTTP request. ${n.status}: ${n.statusText}.`),o(new v(n.statusText,n.status))},n.ontimeout=()=>{this._logger.log(i.Warning,"Timeout from HTTP request."),o(new N)},n.send(e.content)}):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}}class _e extends D{constructor(e){if(super(),typeof fetch<"u"||f.isNode)this._httpClient=new ge(e);else if(typeof XMLHttpRequest<"u")this._httpClient=new ue(e);else throw new Error("No usable HttpClient found.")}send(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new y):e.method?e.url?this._httpClient.send(e):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}getCookieString(e){return this._httpClient.getCookieString(e)}}class S{static write(e){return`${e}${S.RecordSeparator}`}static parse(e){if(e[e.length-1]!==S.RecordSeparator)throw new Error("Message is incomplete.");const t=e.split(S.RecordSeparator);return t.pop(),t}}S.RecordSeparatorCode=30;S.RecordSeparator=String.fromCharCode(S.RecordSeparatorCode);class pe{writeHandshakeRequest(e){return S.write(JSON.stringify(e))}parseHandshakeResponse(e){let t,o;if(T(e)){const l=new Uint8Array(e),a=l.indexOf(S.RecordSeparatorCode);if(a===-1)throw new Error("Message is incomplete.");const h=a+1;t=String.fromCharCode.apply(null,Array.prototype.slice.call(l.slice(0,h))),o=l.byteLength>h?l.slice(h).buffer:null}else{const l=e,a=l.indexOf(S.RecordSeparator);if(a===-1)throw new Error("Message is incomplete.");const h=a+1;t=l.substring(0,h),o=l.length>h?l.substring(h):null}const n=S.parse(t),r=JSON.parse(n[0]);if(r.type)throw new Error("Expected a handshake response from the server.");return[o,r]}}var g;(function(s){s[s.Invocation=1]="Invocation",s[s.StreamItem=2]="StreamItem",s[s.Completion=3]="Completion",s[s.StreamInvocation=4]="StreamInvocation",s[s.CancelInvocation=5]="CancelInvocation",s[s.Ping=6]="Ping",s[s.Close=7]="Close"})(g||(g={}));class fe{constructor(){this.observers=[]}next(e){for(const t of this.observers)t.next(e)}error(e){for(const t of this.observers)t.error&&t.error(e)}complete(){for(const e of this.observers)e.complete&&e.complete()}subscribe(e){return this.observers.push(e),new ie(this,e)}}const we=30*1e3,me=15*1e3;var u;(function(s){s.Disconnected="Disconnected",s.Connecting="Connecting",s.Connected="Connected",s.Disconnecting="Disconnecting",s.Reconnecting="Reconnecting"})(u||(u={}));class H{constructor(e,t,o,n){this._nextKeepAlive=0,this._freezeEventListener=()=>{this._logger.log(i.Warning,"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep")},w.isRequired(e,"connection"),w.isRequired(t,"logger"),w.isRequired(o,"protocol"),this.serverTimeoutInMilliseconds=we,this.keepAliveIntervalInMilliseconds=me,this._logger=t,this._protocol=o,this.connection=e,this._reconnectPolicy=n,this._handshakeProtocol=new pe,this.connection.onreceive=r=>this._processIncomingData(r),this.connection.onclose=r=>this._connectionClosed(r),this._callbacks={},this._methods={},this._closedCallbacks=[],this._reconnectingCallbacks=[],this._reconnectedCallbacks=[],this._invocationId=0,this._receivedHandshakeResponse=!1,this._connectionState=u.Disconnected,this._connectionStarted=!1,this._cachedPingMessage=this._protocol.writeMessage({type:g.Ping})}static create(e,t,o,n){return new H(e,t,o,n)}get state(){return this._connectionState}get connectionId(){return this.connection&&this.connection.connectionId||null}get baseUrl(){return this.connection.baseUrl||""}set baseUrl(e){if(this._connectionState!==u.Disconnected&&this._connectionState!==u.Reconnecting)throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.");if(!e)throw new Error("The HubConnection url must be a valid url.");this.connection.baseUrl=e}start(){return this._startPromise=this._startWithStateTransitions(),this._startPromise}async _startWithStateTransitions(){if(this._connectionState!==u.Disconnected)return Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state."));this._connectionState=u.Connecting,this._logger.log(i.Debug,"Starting HubConnection.");try{await this._startInternal(),f.isBrowser&&window.document.addEventListener("freeze",this._freezeEventListener),this._connectionState=u.Connected,this._connectionStarted=!0,this._logger.log(i.Debug,"HubConnection connected successfully.")}catch(e){return this._connectionState=u.Disconnected,this._logger.log(i.Debug,`HubConnection failed to start successfully because of error '${e}'.`),Promise.reject(e)}}async _startInternal(){this._stopDuringStartError=void 0,this._receivedHandshakeResponse=!1;const e=new Promise((t,o)=>{this._handshakeResolver=t,this._handshakeRejecter=o});await this.connection.start(this._protocol.transferFormat);try{const t={protocol:this._protocol.name,version:this._protocol.version};if(this._logger.log(i.Debug,"Sending handshake request."),await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(t)),this._logger.log(i.Information,`Using HubProtocol '${this._protocol.name}'.`),this._cleanupTimeout(),this._resetTimeoutPeriod(),this._resetKeepAliveInterval(),await e,this._stopDuringStartError)throw this._stopDuringStartError;this.connection.features.inherentKeepAlive||await this._sendMessage(this._cachedPingMessage)}catch(t){throw this._logger.log(i.Debug,`Hub handshake failed with error '${t}' during start(). Stopping HubConnection.`),this._cleanupTimeout(),this._cleanupPingTimer(),await this.connection.stop(t),t}}async stop(){const e=this._startPromise;this._stopPromise=this._stopInternal(),await this._stopPromise;try{await e}catch{}}_stopInternal(e){return this._connectionState===u.Disconnected?(this._logger.log(i.Debug,`Call to HubConnection.stop(${e}) ignored because it is already in the disconnected state.`),Promise.resolve()):this._connectionState===u.Disconnecting?(this._logger.log(i.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnecting state.`),this._stopPromise):(this._connectionState=u.Disconnecting,this._logger.log(i.Debug,"Stopping HubConnection."),this._reconnectDelayHandle?(this._logger.log(i.Debug,"Connection stopped during reconnect delay. Done reconnecting."),clearTimeout(this._reconnectDelayHandle),this._reconnectDelayHandle=void 0,this._completeClose(),Promise.resolve()):(this._cleanupTimeout(),this._cleanupPingTimer(),this._stopDuringStartError=e||new y("The connection was stopped before the hub handshake could complete."),this.connection.stop(e)))}stream(e,...t){const[o,n]=this._replaceStreamingParams(t),r=this._createStreamInvocation(e,t,n);let c;const l=new fe;return l.cancelCallback=()=>{const a=this._createCancelInvocation(r.invocationId);return delete this._callbacks[r.invocationId],c.then(()=>this._sendWithProtocol(a))},this._callbacks[r.invocationId]=(a,h)=>{if(h){l.error(h);return}else a&&(a.type===g.Completion?a.error?l.error(new Error(a.error)):l.complete():l.next(a.item))},c=this._sendWithProtocol(r).catch(a=>{l.error(a),delete this._callbacks[r.invocationId]}),this._launchStreams(o,c),l}_sendMessage(e){return this._resetKeepAliveInterval(),this.connection.send(e)}_sendWithProtocol(e){return this._sendMessage(this._protocol.writeMessage(e))}send(e,...t){const[o,n]=this._replaceStreamingParams(t),r=this._sendWithProtocol(this._createInvocation(e,t,!0,n));return this._launchStreams(o,r),r}invoke(e,...t){const[o,n]=this._replaceStreamingParams(t),r=this._createInvocation(e,t,!1,n);return new Promise((l,a)=>{this._callbacks[r.invocationId]=(d,b)=>{if(b){a(b);return}else d&&(d.type===g.Completion?d.error?a(new Error(d.error)):l(d.result):a(new Error(`Unexpected message type: ${d.type}`)))};const h=this._sendWithProtocol(r).catch(d=>{a(d),delete this._callbacks[r.invocationId]});this._launchStreams(o,h)})}on(e,t){!e||!t||(e=e.toLowerCase(),this._methods[e]||(this._methods[e]=[]),this._methods[e].indexOf(t)===-1&&this._methods[e].push(t))}off(e,t){if(!e)return;e=e.toLowerCase();const o=this._methods[e];if(o)if(t){const n=o.indexOf(t);n!==-1&&(o.splice(n,1),o.length===0&&delete this._methods[e])}else delete this._methods[e]}onclose(e){e&&this._closedCallbacks.push(e)}onreconnecting(e){e&&this._reconnectingCallbacks.push(e)}onreconnected(e){e&&this._reconnectedCallbacks.push(e)}_processIncomingData(e){if(this._cleanupTimeout(),this._receivedHandshakeResponse||(e=this._processHandshakeResponse(e),this._receivedHandshakeResponse=!0),e){const t=this._protocol.parseMessages(e,this._logger);for(const o of t)switch(o.type){case g.Invocation:this._invokeClientMethod(o);break;case g.StreamItem:case g.Completion:{const n=this._callbacks[o.invocationId];if(n){o.type===g.Completion&&delete this._callbacks[o.invocationId];try{n(o)}catch(r){this._logger.log(i.Error,`Stream callback threw error: ${O(r)}`)}}break}case g.Ping:break;case g.Close:{this._logger.log(i.Information,"Close message received from server.");const n=o.error?new Error("Server returned an error on close: "+o.error):void 0;o.allowReconnect===!0?this.connection.stop(n):this._stopPromise=this._stopInternal(n);break}default:this._logger.log(i.Warning,`Invalid message type: ${o.type}.`);break}}this._resetTimeoutPeriod()}_processHandshakeResponse(e){let t,o;try{[o,t]=this._handshakeProtocol.parseHandshakeResponse(e)}catch(n){const r="Error parsing handshake response: "+n;this._logger.log(i.Error,r);const c=new Error(r);throw this._handshakeRejecter(c),c}if(t.error){const n="Server returned handshake error: "+t.error;this._logger.log(i.Error,n);const r=new Error(n);throw this._handshakeRejecter(r),r}else this._logger.log(i.Debug,"Server handshake complete.");return this._handshakeResolver(),o}_resetKeepAliveInterval(){this.connection.features.inherentKeepAlive||(this._nextKeepAlive=new Date().getTime()+this.keepAliveIntervalInMilliseconds,this._cleanupPingTimer())}_resetTimeoutPeriod(){if((!this.connection.features||!this.connection.features.inherentKeepAlive)&&(this._timeoutHandle=setTimeout(()=>this.serverTimeout(),this.serverTimeoutInMilliseconds),this._pingServerHandle===void 0)){let e=this._nextKeepAlive-new Date().getTime();e<0&&(e=0),this._pingServerHandle=setTimeout(async()=>{if(this._connectionState===u.Connected)try{await this._sendMessage(this._cachedPingMessage)}catch{this._cleanupPingTimer()}},e)}}serverTimeout(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))}async _invokeClientMethod(e){const t=e.target.toLowerCase(),o=this._methods[t];if(!o){this._logger.log(i.Warning,`No client method with the name '${t}' found.`),e.invocationId&&(this._logger.log(i.Warning,`No result given for '${t}' method and invocation ID '${e.invocationId}'.`),await this._sendWithProtocol(this._createCompletionMessage(e.invocationId,"Client didn't provide a result.",null)));return}const n=o.slice(),r=!!e.invocationId;let c,l,a;for(const h of n)try{const d=c;c=await h.apply(this,e.arguments),r&&c&&d&&(this._logger.log(i.Error,`Multiple results provided for '${t}'. Sending error to server.`),a=this._createCompletionMessage(e.invocationId,"Client provided multiple results.",null)),l=void 0}catch(d){l=d,this._logger.log(i.Error,`A callback for the method '${t}' threw error '${d}'.`)}a?await this._sendWithProtocol(a):r?(l?a=this._createCompletionMessage(e.invocationId,`${l}`,null):c!==void 0?a=this._createCompletionMessage(e.invocationId,null,c):(this._logger.log(i.Warning,`No result given for '${t}' method and invocation ID '${e.invocationId}'.`),a=this._createCompletionMessage(e.invocationId,"Client didn't provide a result.",null)),await this._sendWithProtocol(a)):c&&this._logger.log(i.Error,`Result given for '${t}' method but server is not expecting a result.`)}_connectionClosed(e){this._logger.log(i.Debug,`HubConnection.connectionClosed(${e}) called while in state ${this._connectionState}.`),this._stopDuringStartError=this._stopDuringStartError||e||new y("The underlying connection was closed before the hub handshake could complete."),this._handshakeResolver&&this._handshakeResolver(),this._cancelCallbacksWithError(e||new Error("Invocation canceled due to the underlying connection being closed.")),this._cleanupTimeout(),this._cleanupPingTimer(),this._connectionState===u.Disconnecting?this._completeClose(e):this._connectionState===u.Connected&&this._reconnectPolicy?this._reconnect(e):this._connectionState===u.Connected&&this._completeClose(e)}_completeClose(e){if(this._connectionStarted){this._connectionState=u.Disconnected,this._connectionStarted=!1,f.isBrowser&&window.document.removeEventListener("freeze",this._freezeEventListener);try{this._closedCallbacks.forEach(t=>t.apply(this,[e]))}catch(t){this._logger.log(i.Error,`An onclose callback called with error '${e}' threw error '${t}'.`)}}}async _reconnect(e){const t=Date.now();let o=0,n=e!==void 0?e:new Error("Attempting to reconnect due to a unknown error."),r=this._getNextRetryDelay(o++,0,n);if(r===null){this._logger.log(i.Debug,"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt."),this._completeClose(e);return}if(this._connectionState=u.Reconnecting,e?this._logger.log(i.Information,`Connection reconnecting because of error '${e}'.`):this._logger.log(i.Information,"Connection reconnecting."),this._reconnectingCallbacks.length!==0){try{this._reconnectingCallbacks.forEach(c=>c.apply(this,[e]))}catch(c){this._logger.log(i.Error,`An onreconnecting callback called with error '${e}' threw error '${c}'.`)}if(this._connectionState!==u.Reconnecting){this._logger.log(i.Debug,"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.");return}}for(;r!==null;){if(this._logger.log(i.Information,`Reconnect attempt number ${o} will start in ${r} ms.`),await new Promise(c=>{this._reconnectDelayHandle=setTimeout(c,r)}),this._reconnectDelayHandle=void 0,this._connectionState!==u.Reconnecting){this._logger.log(i.Debug,"Connection left the reconnecting state during reconnect delay. Done reconnecting.");return}try{if(await this._startInternal(),this._connectionState=u.Connected,this._logger.log(i.Information,"HubConnection reconnected successfully."),this._reconnectedCallbacks.length!==0)try{this._reconnectedCallbacks.forEach(c=>c.apply(this,[this.connection.connectionId]))}catch(c){this._logger.log(i.Error,`An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${c}'.`)}return}catch(c){if(this._logger.log(i.Information,`Reconnect attempt failed because of error '${c}'.`),this._connectionState!==u.Reconnecting){this._logger.log(i.Debug,`Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`),this._connectionState===u.Disconnecting&&this._completeClose();return}n=c instanceof Error?c:new Error(c.toString()),r=this._getNextRetryDelay(o++,Date.now()-t,n)}}this._logger.log(i.Information,`Reconnect retries have been exhausted after ${Date.now()-t} ms and ${o} failed attempts. Connection disconnecting.`),this._completeClose()}_getNextRetryDelay(e,t,o){try{return this._reconnectPolicy.nextRetryDelayInMilliseconds({elapsedMilliseconds:t,previousRetryCount:e,retryReason:o})}catch(n){return this._logger.log(i.Error,`IRetryPolicy.nextRetryDelayInMilliseconds(${e}, ${t}) threw error '${n}'.`),null}}_cancelCallbacksWithError(e){const t=this._callbacks;this._callbacks={},Object.keys(t).forEach(o=>{const n=t[o];try{n(null,e)}catch(r){this._logger.log(i.Error,`Stream 'error' callback called with '${e}' threw error: ${O(r)}`)}})}_cleanupPingTimer(){this._pingServerHandle&&(clearTimeout(this._pingServerHandle),this._pingServerHandle=void 0)}_cleanupTimeout(){this._timeoutHandle&&clearTimeout(this._timeoutHandle)}_createInvocation(e,t,o,n){if(o)return n.length!==0?{arguments:t,streamIds:n,target:e,type:g.Invocation}:{arguments:t,target:e,type:g.Invocation};{const r=this._invocationId;return this._invocationId++,n.length!==0?{arguments:t,invocationId:r.toString(),streamIds:n,target:e,type:g.Invocation}:{arguments:t,invocationId:r.toString(),target:e,type:g.Invocation}}}_launchStreams(e,t){if(e.length!==0){t||(t=Promise.resolve());for(const o in e)e[o].subscribe({complete:()=>{t=t.then(()=>this._sendWithProtocol(this._createCompletionMessage(o)))},error:n=>{let r;n instanceof Error?r=n.message:n&&n.toString?r=n.toString():r="Unknown error",t=t.then(()=>this._sendWithProtocol(this._createCompletionMessage(o,r)))},next:n=>{t=t.then(()=>this._sendWithProtocol(this._createStreamItemMessage(o,n)))}})}}_replaceStreamingParams(e){const t=[],o=[];for(let n=0;n<e.length;n++){const r=e[n];if(this._isObservable(r)){const c=this._invocationId;this._invocationId++,t[c]=r,o.push(c.toString()),e.splice(n,1)}}return[t,o]}_isObservable(e){return e&&e.subscribe&&typeof e.subscribe=="function"}_createStreamInvocation(e,t,o){const n=this._invocationId;return this._invocationId++,o.length!==0?{arguments:t,invocationId:n.toString(),streamIds:o,target:e,type:g.StreamInvocation}:{arguments:t,invocationId:n.toString(),target:e,type:g.StreamInvocation}}_createCancelInvocation(e){return{invocationId:e,type:g.CancelInvocation}}_createStreamItemMessage(e,t){return{invocationId:e,item:t,type:g.StreamItem}}_createCompletionMessage(e,t,o){return t?{error:t,invocationId:e,type:g.Completion}:{invocationId:e,result:o,type:g.Completion}}}const be=[0,2e3,1e4,3e4,null];class j{constructor(e){this._retryDelays=e!==void 0?[...e,null]:be}nextRetryDelayInMilliseconds(e){return this._retryDelays[e.previousRetryCount]}}class C{}C.Authorization="Authorization";C.Cookie="Cookie";class Se extends D{constructor(e,t){super(),this._innerClient=e,this._accessTokenFactory=t}async send(e){let t=!0;this._accessTokenFactory&&(!this._accessToken||e.url&&e.url.indexOf("/negotiate?")>0)&&(t=!1,this._accessToken=await this._accessTokenFactory()),this._setAuthorizationHeader(e);const o=await this._innerClient.send(e);return t&&o.statusCode===401&&this._accessTokenFactory?(this._accessToken=await this._accessTokenFactory(),this._setAuthorizationHeader(e),await this._innerClient.send(e)):o}_setAuthorizationHeader(e){e.headers||(e.headers={}),this._accessToken?e.headers[C.Authorization]=`Bearer ${this._accessToken}`:this._accessTokenFactory&&e.headers[C.Authorization]&&delete e.headers[C.Authorization]}getCookieString(e){return this._innerClient.getCookieString(e)}}var p;(function(s){s[s.None=0]="None",s[s.WebSockets=1]="WebSockets",s[s.ServerSentEvents=2]="ServerSentEvents",s[s.LongPolling=4]="LongPolling"})(p||(p={}));var m;(function(s){s[s.Text=1]="Text",s[s.Binary=2]="Binary"})(m||(m={}));let ye=class{constructor(){this._isAborted=!1,this.onabort=null}abort(){this._isAborted||(this._isAborted=!0,this.onabort&&this.onabort())}get signal(){return this}get aborted(){return this._isAborted}};class L{constructor(e,t,o){this._httpClient=e,this._logger=t,this._pollAbort=new ye,this._options=o,this._running=!1,this.onreceive=null,this.onclose=null}get pollAborted(){return this._pollAbort.aborted}async connect(e,t){if(w.isRequired(e,"url"),w.isRequired(t,"transferFormat"),w.isIn(t,m,"transferFormat"),this._url=e,this._logger.log(i.Trace,"(LongPolling transport) Connecting."),t===m.Binary&&typeof XMLHttpRequest<"u"&&typeof new XMLHttpRequest().responseType!="string")throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");const[o,n]=k(),r={[o]:n,...this._options.headers},c={abortSignal:this._pollAbort.signal,headers:r,timeout:1e5,withCredentials:this._options.withCredentials};t===m.Binary&&(c.responseType="arraybuffer");const l=`${e}&_=${Date.now()}`;this._logger.log(i.Trace,`(LongPolling transport) polling: ${l}.`);const a=await this._httpClient.get(l,c);a.statusCode!==200?(this._logger.log(i.Error,`(LongPolling transport) Unexpected response code: ${a.statusCode}.`),this._closeError=new v(a.statusText||"",a.statusCode),this._running=!1):this._running=!0,this._receiving=this._poll(this._url,c)}async _poll(e,t){try{for(;this._running;)try{const o=`${e}&_=${Date.now()}`;this._logger.log(i.Trace,`(LongPolling transport) polling: ${o}.`);const n=await this._httpClient.get(o,t);n.statusCode===204?(this._logger.log(i.Information,"(LongPolling transport) Poll terminated by server."),this._running=!1):n.statusCode!==200?(this._logger.log(i.Error,`(LongPolling transport) Unexpected response code: ${n.statusCode}.`),this._closeError=new v(n.statusText||"",n.statusCode),this._running=!1):n.content?(this._logger.log(i.Trace,`(LongPolling transport) data received. ${I(n.content,this._options.logMessageContent)}.`),this.onreceive&&this.onreceive(n.content)):this._logger.log(i.Trace,"(LongPolling transport) Poll timed out, reissuing.")}catch(o){this._running?o instanceof N?this._logger.log(i.Trace,"(LongPolling transport) Poll timed out, reissuing."):(this._closeError=o,this._running=!1):this._logger.log(i.Trace,`(LongPolling transport) Poll errored after shutdown: ${o.message}`)}}finally{this._logger.log(i.Trace,"(LongPolling transport) Polling complete."),this.pollAborted||this._raiseOnClose()}}async send(e){return this._running?X(this._logger,"LongPolling",this._httpClient,this._url,e,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}async stop(){this._logger.log(i.Trace,"(LongPolling transport) Stopping polling."),this._running=!1,this._pollAbort.abort();try{await this._receiving,this._logger.log(i.Trace,`(LongPolling transport) sending DELETE request to ${this._url}.`);const e={},[t,o]=k();e[t]=o;const n={headers:{...e,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials};await this._httpClient.delete(this._url,n),this._logger.log(i.Trace,"(LongPolling transport) DELETE request sent.")}finally{this._logger.log(i.Trace,"(LongPolling transport) Stop finished."),this._raiseOnClose()}}_raiseOnClose(){if(this.onclose){let e="(LongPolling transport) Firing onclose event.";this._closeError&&(e+=" Error: "+this._closeError),this._logger.log(i.Trace,e),this.onclose(this._closeError)}}}class Ce{constructor(e,t,o,n){this._httpClient=e,this._accessToken=t,this._logger=o,this._options=n,this.onreceive=null,this.onclose=null}async connect(e,t){return w.isRequired(e,"url"),w.isRequired(t,"transferFormat"),w.isIn(t,m,"transferFormat"),this._logger.log(i.Trace,"(SSE transport) Connecting."),this._url=e,this._accessToken&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(this._accessToken)}`),new Promise((o,n)=>{let r=!1;if(t!==m.Text){n(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"));return}let c;if(f.isBrowser||f.isWebWorker)c=new this._options.EventSource(e,{withCredentials:this._options.withCredentials});else{const l=this._httpClient.getCookieString(e),a={};a.Cookie=l;const[h,d]=k();a[h]=d,c=new this._options.EventSource(e,{withCredentials:this._options.withCredentials,headers:{...a,...this._options.headers}})}try{c.onmessage=l=>{if(this.onreceive)try{this._logger.log(i.Trace,`(SSE transport) data received. ${I(l.data,this._options.logMessageContent)}.`),this.onreceive(l.data)}catch(a){this._close(a);return}},c.onerror=l=>{r?this._close():n(new Error("EventSource failed to connect. The connection could not be found on the server, either the connection ID is not present on the server, or a proxy is refusing/buffering the connection. If you have multiple servers check that sticky sessions are enabled."))},c.onopen=()=>{this._logger.log(i.Information,`SSE connected to ${this._url}`),this._eventSource=c,r=!0,o()}}catch(l){n(l);return}})}async send(e){return this._eventSource?X(this._logger,"SSE",this._httpClient,this._url,e,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}stop(){return this._close(),Promise.resolve()}_close(e){this._eventSource&&(this._eventSource.close(),this._eventSource=void 0,this.onclose&&this.onclose(e))}}class ve{constructor(e,t,o,n,r,c){this._logger=o,this._accessTokenFactory=t,this._logMessageContent=n,this._webSocketConstructor=r,this._httpClient=e,this.onreceive=null,this.onclose=null,this._headers=c}async connect(e,t){w.isRequired(e,"url"),w.isRequired(t,"transferFormat"),w.isIn(t,m,"transferFormat"),this._logger.log(i.Trace,"(WebSockets transport) Connecting.");let o;return this._accessTokenFactory&&(o=await this._accessTokenFactory()),new Promise((n,r)=>{e=e.replace(/^http/,"ws");let c;const l=this._httpClient.getCookieString(e);let a=!1;if(f.isNode||f.isReactNative){const h={},[d,b]=k();h[d]=b,o&&(h[C.Authorization]=`Bearer ${o}`),l&&(h[C.Cookie]=l),c=new this._webSocketConstructor(e,void 0,{headers:{...h,...this._headers}})}else o&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(o)}`);c||(c=new this._webSocketConstructor(e)),t===m.Binary&&(c.binaryType="arraybuffer"),c.onopen=h=>{this._logger.log(i.Information,`WebSocket connected to ${e}.`),this._webSocket=c,a=!0,n()},c.onerror=h=>{let d=null;typeof ErrorEvent<"u"&&h instanceof ErrorEvent?d=h.error:d="There was an error with the transport",this._logger.log(i.Information,`(WebSockets transport) ${d}.`)},c.onmessage=h=>{if(this._logger.log(i.Trace,`(WebSockets transport) data received. ${I(h.data,this._logMessageContent)}.`),this.onreceive)try{this.onreceive(h.data)}catch(d){this._close(d);return}},c.onclose=h=>{if(a)this._close(h);else{let d=null;typeof ErrorEvent<"u"&&h instanceof ErrorEvent?d=h.error:d="WebSocket failed to connect. The connection could not be found on the server, either the endpoint may not be a SignalR endpoint, the connection ID is not present on the server, or there is a proxy blocking WebSockets. If you have multiple servers check that sticky sessions are enabled.",r(new Error(d))}}})}send(e){return this._webSocket&&this._webSocket.readyState===this._webSocketConstructor.OPEN?(this._logger.log(i.Trace,`(WebSockets transport) sending data. ${I(e,this._logMessageContent)}.`),this._webSocket.send(e),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")}stop(){return this._webSocket&&this._close(void 0),Promise.resolve()}_close(e){this._webSocket&&(this._webSocket.onclose=()=>{},this._webSocket.onmessage=()=>{},this._webSocket.onerror=()=>{},this._webSocket.close(),this._webSocket=void 0),this._logger.log(i.Trace,"(WebSockets transport) socket closed."),this.onclose&&(this._isCloseEvent(e)&&(e.wasClean===!1||e.code!==1e3)?this.onclose(new Error(`WebSocket closed with status code: ${e.code} (${e.reason||"no reason given"}).`)):e instanceof Error?this.onclose(e):this.onclose())}_isCloseEvent(e){return e&&typeof e.wasClean=="boolean"&&typeof e.code=="number"}}const z=100;class ke{constructor(e,t={}){if(this._stopPromiseResolver=()=>{},this.features={},this._negotiateVersion=1,w.isRequired(e,"url"),this._logger=re(t.logger),this.baseUrl=this._resolveUrl(e),t=t||{},t.logMessageContent=t.logMessageContent===void 0?!1:t.logMessageContent,typeof t.withCredentials=="boolean"||t.withCredentials===void 0)t.withCredentials=t.withCredentials===void 0?!0:t.withCredentials;else throw new Error("withCredentials option was not a 'boolean' or 'undefined' value");t.timeout=t.timeout===void 0?100*1e3:t.timeout;let o=null,n=null;if(f.isNode&&typeof require<"u"){const r=typeof __webpack_require__=="function"?__non_webpack_require__:require;o=r("ws"),n=r("eventsource")}!f.isNode&&typeof WebSocket<"u"&&!t.WebSocket?t.WebSocket=WebSocket:f.isNode&&!t.WebSocket&&o&&(t.WebSocket=o),!f.isNode&&typeof EventSource<"u"&&!t.EventSource?t.EventSource=EventSource:f.isNode&&!t.EventSource&&typeof n<"u"&&(t.EventSource=n),this._httpClient=new Se(t.httpClient||new _e(this._logger),t.accessTokenFactory),this._connectionState="Disconnected",this._connectionStarted=!1,this._options=t,this.onreceive=null,this.onclose=null}async start(e){if(e=e||m.Binary,w.isIn(e,m,"transferFormat"),this._logger.log(i.Debug,`Starting connection with transfer format '${m[e]}'.`),this._connectionState!=="Disconnected")return Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state."));if(this._connectionState="Connecting",this._startInternalPromise=this._startInternal(e),await this._startInternalPromise,this._connectionState==="Disconnecting"){const t="Failed to start the HttpConnection before stop() was called.";return this._logger.log(i.Error,t),await this._stopPromise,Promise.reject(new y(t))}else if(this._connectionState!=="Connected"){const t="HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!";return this._logger.log(i.Error,t),Promise.reject(new y(t))}this._connectionStarted=!0}send(e){return this._connectionState!=="Connected"?Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State.")):(this._sendQueue||(this._sendQueue=new W(this.transport)),this._sendQueue.send(e))}async stop(e){if(this._connectionState==="Disconnected")return this._logger.log(i.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnected state.`),Promise.resolve();if(this._connectionState==="Disconnecting")return this._logger.log(i.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnecting state.`),this._stopPromise;this._connectionState="Disconnecting",this._stopPromise=new Promise(t=>{this._stopPromiseResolver=t}),await this._stopInternal(e),await this._stopPromise}async _stopInternal(e){this._stopError=e;try{await this._startInternalPromise}catch{}if(this.transport){try{await this.transport.stop()}catch(t){this._logger.log(i.Error,`HttpConnection.transport.stop() threw error '${t}'.`),this._stopConnection()}this.transport=void 0}else this._logger.log(i.Debug,"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.")}async _startInternal(e){let t=this.baseUrl;this._accessTokenFactory=this._options.accessTokenFactory,this._httpClient._accessTokenFactory=this._accessTokenFactory;try{if(this._options.skipNegotiation)if(this._options.transport===p.WebSockets)this.transport=this._constructTransport(p.WebSockets),await this._startTransport(t,e);else throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");else{let o=null,n=0;do{if(o=await this._getNegotiationResponse(t),this._connectionState==="Disconnecting"||this._connectionState==="Disconnected")throw new y("The connection was stopped during negotiation.");if(o.error)throw new Error(o.error);if(o.ProtocolVersion)throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");if(o.url&&(t=o.url),o.accessToken){const r=o.accessToken;this._accessTokenFactory=()=>r,this._httpClient._accessToken=r,this._httpClient._accessTokenFactory=void 0}n++}while(o.url&&n<z);if(n===z&&o.url)throw new Error("Negotiate redirection limit exceeded.");await this._createTransport(t,this._options.transport,o,e)}this.transport instanceof L&&(this.features.inherentKeepAlive=!0),this._connectionState==="Connecting"&&(this._logger.log(i.Debug,"The HttpConnection connected successfully."),this._connectionState="Connected")}catch(o){return this._logger.log(i.Error,"Failed to start the connection: "+o),this._connectionState="Disconnected",this.transport=void 0,this._stopPromiseResolver(),Promise.reject(o)}}async _getNegotiationResponse(e){const t={},[o,n]=k();t[o]=n;const r=this._resolveNegotiateUrl(e);this._logger.log(i.Debug,`Sending negotiation request: ${r}.`);try{const c=await this._httpClient.post(r,{content:"",headers:{...t,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials});if(c.statusCode!==200)return Promise.reject(new Error(`Unexpected status code returned from negotiate '${c.statusCode}'`));const l=JSON.parse(c.content);return(!l.negotiateVersion||l.negotiateVersion<1)&&(l.connectionToken=l.connectionId),l}catch(c){let l="Failed to complete negotiation with the server: "+c;return c instanceof v&&c.statusCode===404&&(l=l+" Either this is not a SignalR endpoint or there is a proxy blocking the connection."),this._logger.log(i.Error,l),Promise.reject(new te(l))}}_createConnectUrl(e,t){return t?e+(e.indexOf("?")===-1?"?":"&")+`id=${t}`:e}async _createTransport(e,t,o,n){let r=this._createConnectUrl(e,o.connectionToken);if(this._isITransport(t)){this._logger.log(i.Debug,"Connection was provided an instance of ITransport, using that directly."),this.transport=t,await this._startTransport(r,n),this.connectionId=o.connectionId;return}const c=[],l=o.availableTransports||[];let a=o;for(const h of l){const d=this._resolveTransportOrError(h,t,n);if(d instanceof Error)c.push(`${h.transport} failed:`),c.push(d);else if(this._isITransport(d)){if(this.transport=d,!a){try{a=await this._getNegotiationResponse(e)}catch(b){return Promise.reject(b)}r=this._createConnectUrl(e,a.connectionToken)}try{await this._startTransport(r,n),this.connectionId=a.connectionId;return}catch(b){if(this._logger.log(i.Error,`Failed to start the transport '${h.transport}': ${b}`),a=void 0,c.push(new ee(`${h.transport} failed: ${b}`,p[h.transport])),this._connectionState!=="Connecting"){const U="Failed to select transport before stop() was called.";return this._logger.log(i.Debug,U),Promise.reject(new y(U))}}}}return c.length>0?Promise.reject(new ne(`Unable to connect to the server with any of the available transports. ${c.join(" ")}`,c)):Promise.reject(new Error("None of the transports supported by the client are supported by the server."))}_constructTransport(e){switch(e){case p.WebSockets:if(!this._options.WebSocket)throw new Error("'WebSocket' is not supported in your environment.");return new ve(this._httpClient,this._accessTokenFactory,this._logger,this._options.logMessageContent,this._options.WebSocket,this._options.headers||{});case p.ServerSentEvents:if(!this._options.EventSource)throw new Error("'EventSource' is not supported in your environment.");return new Ce(this._httpClient,this._httpClient._accessToken,this._logger,this._options);case p.LongPolling:return new L(this._httpClient,this._logger,this._options);default:throw new Error(`Unknown transport: ${e}.`)}}_startTransport(e,t){return this.transport.onreceive=this.onreceive,this.transport.onclose=o=>this._stopConnection(o),this.transport.connect(e,t)}_resolveTransportOrError(e,t,o){const n=p[e.transport];if(n==null)return this._logger.log(i.Debug,`Skipping transport '${e.transport}' because it is not supported by this client.`),new Error(`Skipping transport '${e.transport}' because it is not supported by this client.`);if(Ee(t,n))if(e.transferFormats.map(c=>m[c]).indexOf(o)>=0){if(n===p.WebSockets&&!this._options.WebSocket||n===p.ServerSentEvents&&!this._options.EventSource)return this._logger.log(i.Debug,`Skipping transport '${p[n]}' because it is not supported in your environment.'`),new Z(`'${p[n]}' is not supported in your environment.`,n);this._logger.log(i.Debug,`Selecting transport '${p[n]}'.`);try{return this._constructTransport(n)}catch(c){return c}}else return this._logger.log(i.Debug,`Skipping transport '${p[n]}' because it does not support the requested transfer format '${m[o]}'.`),new Error(`'${p[n]}' does not support ${m[o]}.`);else return this._logger.log(i.Debug,`Skipping transport '${p[n]}' because it was disabled by the client.`),new q(`'${p[n]}' is disabled by the client.`,n)}_isITransport(e){return e&&typeof e=="object"&&"connect"in e}_stopConnection(e){if(this._logger.log(i.Debug,`HttpConnection.stopConnection(${e}) called while in state ${this._connectionState}.`),this.transport=void 0,e=this._stopError||e,this._stopError=void 0,this._connectionState==="Disconnected"){this._logger.log(i.Debug,`Call to HttpConnection.stopConnection(${e}) was ignored because the connection is already in the disconnected state.`);return}if(this._connectionState==="Connecting")throw this._logger.log(i.Warning,`Call to HttpConnection.stopConnection(${e}) was ignored because the connection is still in the connecting state.`),new Error(`HttpConnection.stopConnection(${e}) was called while the connection is still in the connecting state.`);if(this._connectionState==="Disconnecting"&&this._stopPromiseResolver(),e?this._logger.log(i.Error,`Connection disconnected with error '${e}'.`):this._logger.log(i.Information,"Connection disconnected."),this._sendQueue&&(this._sendQueue.stop().catch(t=>{this._logger.log(i.Error,`TransportSendQueue.stop() threw error '${t}'.`)}),this._sendQueue=void 0),this.connectionId=void 0,this._connectionState="Disconnected",this._connectionStarted){this._connectionStarted=!1;try{this.onclose&&this.onclose(e)}catch(t){this._logger.log(i.Error,`HttpConnection.onclose(${e}) threw error '${t}'.`)}}}_resolveUrl(e){if(e.lastIndexOf("https://",0)===0||e.lastIndexOf("http://",0)===0)return e;if(!f.isBrowser)throw new Error(`Cannot resolve '${e}'.`);const t=window.document.createElement("a");return t.href=e,this._logger.log(i.Information,`Normalizing '${e}' to '${t.href}'.`),t.href}_resolveNegotiateUrl(e){const t=e.indexOf("?");let o=e.substring(0,t===-1?e.length:t);return o[o.length-1]!=="/"&&(o+="/"),o+="negotiate",o+=t===-1?"":e.substring(t),o.indexOf("negotiateVersion")===-1&&(o+=t===-1?"?":"&",o+="negotiateVersion="+this._negotiateVersion),o}}function Ee(s,e){return!s||(e&s)!==0}class W{constructor(e){this._transport=e,this._buffer=[],this._executing=!0,this._sendBufferedData=new P,this._transportResult=new P,this._sendLoopPromise=this._sendLoop()}send(e){return this._bufferData(e),this._transportResult||(this._transportResult=new P),this._transportResult.promise}stop(){return this._executing=!1,this._sendBufferedData.resolve(),this._sendLoopPromise}_bufferData(e){if(this._buffer.length&&typeof this._buffer[0]!=typeof e)throw new Error(`Expected data to be of type ${typeof this._buffer} but was of type ${typeof e}`);this._buffer.push(e),this._sendBufferedData.resolve()}async _sendLoop(){for(;;){if(await this._sendBufferedData.promise,!this._executing){this._transportResult&&this._transportResult.reject("Connection stopped.");break}this._sendBufferedData=new P;const e=this._transportResult;this._transportResult=void 0;const t=typeof this._buffer[0]=="string"?this._buffer.join(""):W._concatBuffers(this._buffer);this._buffer.length=0;try{await this._transport.send(t),e.resolve()}catch(o){e.reject(o)}}}static _concatBuffers(e){const t=e.map(r=>r.byteLength).reduce((r,c)=>r+c),o=new Uint8Array(t);let n=0;for(const r of e)o.set(new Uint8Array(r),n),n+=r.byteLength;return o.buffer}}class P{constructor(){this.promise=new Promise((e,t)=>[this._resolver,this._rejecter]=[e,t])}resolve(){this._resolver()}reject(e){this._rejecter(e)}}const Ie="json";class Te{constructor(){this.name=Ie,this.version=1,this.transferFormat=m.Text}parseMessages(e,t){if(typeof e!="string")throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!e)return[];t===null&&(t=E.instance);const o=S.parse(e),n=[];for(const r of o){const c=JSON.parse(r);if(typeof c.type!="number")throw new Error("Invalid payload.");switch(c.type){case g.Invocation:this._isInvocationMessage(c);break;case g.StreamItem:this._isStreamItemMessage(c);break;case g.Completion:this._isCompletionMessage(c);break;case g.Ping:break;case g.Close:break;default:t.log(i.Information,"Unknown message type '"+c.type+"' ignored.");continue}n.push(c)}return n}writeMessage(e){return S.write(JSON.stringify(e))}_isInvocationMessage(e){this._assertNotEmptyString(e.target,"Invalid payload for Invocation message."),e.invocationId!==void 0&&this._assertNotEmptyString(e.invocationId,"Invalid payload for Invocation message.")}_isStreamItemMessage(e){if(this._assertNotEmptyString(e.invocationId,"Invalid payload for StreamItem message."),e.item===void 0)throw new Error("Invalid payload for StreamItem message.")}_isCompletionMessage(e){if(e.result&&e.error)throw new Error("Invalid payload for Completion message.");!e.result&&e.error&&this._assertNotEmptyString(e.error,"Invalid payload for Completion message."),this._assertNotEmptyString(e.invocationId,"Invalid payload for Completion message.")}_assertNotEmptyString(e,t){if(typeof e!="string"||e==="")throw new Error(t)}}const Pe={trace:i.Trace,debug:i.Debug,info:i.Information,information:i.Information,warn:i.Warning,warning:i.Warning,error:i.Error,critical:i.Critical,none:i.None};function $e(s){const e=Pe[s.toLowerCase()];if(typeof e<"u")return e;throw new Error(`Unknown log level: ${s}`)}class V{configureLogging(e){if(w.isRequired(e,"logging"),De(e))this.logger=e;else if(typeof e=="string"){const t=$e(e);this.logger=new $(t)}else this.logger=new $(e);return this}withUrl(e,t){return w.isRequired(e,"url"),w.isNotEmpty(e,"url"),this.url=e,typeof t=="object"?this.httpConnectionOptions={...this.httpConnectionOptions,...t}:this.httpConnectionOptions={...this.httpConnectionOptions,transport:t},this}withHubProtocol(e){return w.isRequired(e,"protocol"),this.protocol=e,this}withAutomaticReconnect(e){if(this.reconnectPolicy)throw new Error("A reconnectPolicy has already been set.");return e?Array.isArray(e)?this.reconnectPolicy=new j(e):this.reconnectPolicy=e:this.reconnectPolicy=new j,this}build(){const e=this.httpConnectionOptions||{};if(e.logger===void 0&&(e.logger=this.logger),!this.url)throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");const t=new ke(this.url,e);return H.create(t,this.logger||E.instance,this.protocol||new Te,this.reconnectPolicy)}}function De(s){return s.log!==void 0}class Ue{constructor(e,t,o){_(this,"url");_(this,"group");_(this,"isConected");_(this,"_isConected");_(this,"users",{});_(this,"usersStore");_(this,"Users");_(this,"connection");_(this,"connectionPromise");this.url=e,this.group=o,this.usersStore=x({}),this.Users=A(this.usersStore,n=>n),this._isConected=x(!1),this.isConected=A(this._isConected,n=>n),this.connection=new V().withUrl(e+"/hub",{headers:{user:t,group:o},accessTokenFactory:()=>`${o}:${t}`,withCredentials:!0}).build(),this.connection.on("updatedUser",async(n,r)=>{console.log("called updateUser",{user:n,stammData:r});const c=JSON.parse(n.characterData);if(c){const l=r?await R.fromJson(JSON.parse(r)):await R.init(!1,c==null?void 0:c.stammdatenId);let a;l?(a=new Q(l,c),console.log("character loadede")):await this.SendToPlayer(n.id,{type:"requestChar",withStammdaten:!0});const h=this.users[n.id];if(h!=null&&h.playerName&&(h.charStateSyncronizer.unsubscribe(),h.charStateSyncronizer.RemoveEventListener(this.transmitStateChange.bind(this,n.id))),a){const d=new B(a),b=new F(d);this.users[n.id]={...n,char:a,state:d,charStateSyncronizer:b,sendToUsers:this.SendToPlayer.bind(this,n.id)},this.usersStore.set(this.users),b.subscribe(),b.AddEventListener(this.transmitStateChange.bind(this,n.id)),this.SendToPlayer(t,{type:"requestStats"})}}}),this.connection.on("reciveData",async(n,r)=>{console.log("called reciveData",r);const c=JSON.parse(r);if(c.type=="updateStat"){const l=this.users[n];if(l.playerName!==void 0){const{charStateSyncronizer:a}=l;a.set(c.path,c.value)}}else console.warn("unknown message",c)}),this.connection.onreconnecting(()=>this._isConected.set(!1)),this.connection.onreconnected(()=>this._isConected.set(!1)),this.connectionPromise=this.connection.start().catch(n=>console.error(n)).then(()=>this._isConected.set(!0))}async transmitStateChange(e,t,o){console.info(`send to ${e}`,{path:t,value:o}),await this.SendToPlayer(e,{type:"updateStat",path:t,value:o})}async Close(){this._isConected.set(!1),await this.connection.stop()}async AddPlayer(){await this.connectionPromise;const e=await this.connection.invoke("AddUser");typeof e=="string"&&e.length>0&&(this.users[e]={id:e,sendToUsers:this.SendToPlayer.bind(this,e)},this.usersStore.set(this.users))}async SendToPlayer(e,t){await this.connectionPromise,await this.connection.send("SendToPlayer",e,JSON.stringify(t))}async SendToAll(e){await this.connectionPromise,await this.connection.send("SendToAll",JSON.stringify(e))}}class Oe{constructor(e,t,o){_(this,"url");_(this,"connection");_(this,"playerName");_(this,"char");_(this,"charState");_(this,"charStateSyncronizer");_(this,"connectionPromise");_(this,"isConected");_(this,"_isConected");this.url=e,this._isConected=x(!1),this.isConected=A(this._isConected,n=>n),this.connection=new V().withUrl(e+"/hub",{headers:{user:t,group:o},accessTokenFactory:()=>`${o}:${t}`,withCredentials:!0}).build(),this.connection.on("reciveData",async n=>{var c;console.log("called reciveData",n);const r=JSON.parse(n);if(r.type=="requestChar")console.log("calling",r.withStammdaten),r.withStammdaten?this.UpdateSelf(!0):this.UpdateSelf(!1);else if(r.type=="updateStat")(c=this.charStateSyncronizer)==null||c.set(r.path,r.value);else if(r.type=="requestStats"){if(this.charStateSyncronizer){const l=this.charStateSyncronizer.get();await Promise.all(l.map(([a,h])=>this.transmitStateChange(a,h)))}}else console.warn("unknown message",r)}),this.connection.onreconnecting(()=>this._isConected.set(!1)),this.connection.onreconnected(()=>this._isConected.set(!1)),this.connectionPromise=this.connection.start().catch(n=>console.error(n)).then(()=>this._isConected.set(!0))}async Close(){this._isConected.set(!1),await this.connection.stop()}async transmitStateChange(e,t){console.info("send to GM",{path:e,value:t}),await this.SendToGm({type:"updateStat",path:e,value:t})}async InitPlayerData(e,t){await this.connectionPromise,this.playerName=e,this.charStateSyncronizer&&(this.charStateSyncronizer.RemoveEventListener(this.transmitStateChange.bind(this)),this.charStateSyncronizer.unsubscribe()),t instanceof B?(this.charState=t,this.charStateSyncronizer=new F(this.charState),this.char=Y(t.char.persistanceStore),this.charStateSyncronizer.subscribe(),this.charStateSyncronizer.AddEventListener(this.transmitStateChange.bind(this))):this.char=t,await this.UpdateSelf()}async UpdateSelf(e=!1){var t,o;if(await this.connectionPromise,console.log("using stadmmdaten",e),e){const n=await R.init(!1,(t=this.char)==null?void 0:t.stammdatenId);console.log("sending stammdaten",n),n?await this.connection.send("InitUser",this.playerName,JSON.stringify(this.char),JSON.stringify(n.Instance)):console.error("Faild to load stammdaten",(o=this.char)==null?void 0:o.stammdatenId)}else await this.connection.send("InitUser",this.playerName,JSON.stringify(this.char),null)}async SendToGm(e){await this.connectionPromise,await this.connection.send("SendToGm",JSON.stringify(e))}}export{Oe as C,Ue as a};
